name: Build React Native Android App

on:
  push:
    branches:
      - main  # Déclenche le pipeline lors des push sur la branche principale
  pull_request:
    branches:
      - main  # Déclenche le pipeline lors des pull requests sur la branche principale

jobs:
  build:
    runs-on: ubuntu-latest  # Utilisation d'un environnement Ubuntu pour exécuter le pipeline

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2  # Récupérer le code source depuis le dépôt

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'  # Définir la version de Node.js souhaitée

    - name: Install dependencies using Yarn
      run: |
        curl -o- -L https://yarnpkg.com/install.sh | bash  # Installer Yarn si nécessaire
        yarn install  # Installer les dépendances du projet

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.yarn/cache  # Mettre en cache les modules Yarn pour accélérer les futures builds
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}  # Clé de cache basée sur yarn.lock
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Android dependencies
      run: |
        sudo apt-get install -y openjdk-11-jdk  # Installer JDK 11 nécessaire pour Android
        echo "y" | sdkmanager --licenses  # Accepter les licences Android SDK
        sdkmanager "platforms;android-30" "build-tools;30.0.3"  # Installer les outils Android nécessaires

    - name: Build APK
      run: |
        yarn react-native run-android --variant=release  # Construire l'APK pour la release

    - name: Upload APK as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: android-app
        path: android/app/build/outputs/apk/release/app-release.apk  # Upload du fichier APK

    - name: Clean up
      run: |
        yarn cache clean  # Nettoyer le cache après le build

